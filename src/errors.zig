const std = @import("std");

pub const Error = error{
    FileNotFound,
    AccessDenied,
    SharingViolation,
    PipeBusy,
    DeviceBusy,
    NameTooLong,
    InvalidUtf8,
    InvalidWtf8,
    BadPathName,
    NetworkNotFound,
    AntivirusInterference,
    NoDevice,
    SymLinkLoop,
    SystemResources,
    FileTooBig,
    SystemFdQuotaExceeded,
    ProcessFdQuotaExceeded,
    IsDir,
    PathAlreadyExists,
    FileBusy,
    NoSpaceLeft,
    WouldBlock,
    FileLocksNotSupported,
    NotDir,
    InputOutput,
    ConnectionResetByPeer,
    ConnectionTimedOut,
    SocketNotConnected,
    NotOpenForReading,
    OperationAborted,
    BrokenPipe,
    DiskQuota,
    LinkQuotaExceeded,
    ReadOnlyFileSystem,
    SwapFile,
    NotOpenForWriting,
    FilesOpenedWithWrongFlags,
    Unseekable,
    MessageTooBig,
    NetworkUnreachable,
    NetworkSubsystemFailed,
    FileDescriptorNotASocket,
    FastOpenAlreadyInProgress,
    RenameAcrossMountPoints,
    CorruptedData,
    LockViolation,
    InvalidArgument, // rly stupid error
    Unexpected,
};

// https://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
pub fn stringify(err: Error) [:0]const u8 { // todo: we could  make these errors more expresive
    return switch (err) {
        error.FileNotFound => "No such file or directory",
        error.AccessDenied => "Permission denied",
        error.SharingViolation, error.PipeBusy, error.DeviceBusy => "Device or resource busy",
        error.NameTooLong => "File name too long",
        error.InvalidUtf8, error.InvalidWtf8 => "Invalid or incomplete multibyte or wide character",
        error.BadPathName => "Path invalid",
        error.NetworkNotFound => "Network not found",
        error.AntivirusInterference => "Blocked by antivirus",
        error.NoDevice => "No such device or address",
        error.SymLinkLoop => "Too many levels of symbolic links",
        error.SystemResources => "Cannot allocate memory",
        error.FileTooBig => "File too large",
        error.SystemFdQuotaExceeded => "System quota exceeded",
        error.ProcessFdQuotaExceeded => "Too many open files",
        error.IsDir => "Is a directory",
        error.PathAlreadyExists => "File exists",
        error.FileBusy, error.SwapFile => "Text file busy",
        error.NoSpaceLeft => "No space left on device",
        error.WouldBlock => "Operation would block",
        error.FileLocksNotSupported => "Operation not supported",
        error.NotDir => "Not a directory",
        error.InputOutput => "Input/output error",
        error.ConnectionResetByPeer, error.OperationAborted => "Connection reset by peer",
        error.ConnectionTimedOut => "Connection timed out",
        error.SocketNotConnected => "Transport endpoint is not connected",
        error.NotOpenForReading, error.BrokenPipe => "File descriptor in bad state",
        error.ReadOnlyFileSystem => "Read-only file system",
        error.DiskQuota => "Disk quota exceeded",
        error.LinkQuotaExceeded => "Too many lunks",
        error.NotOpenForWriting, error.FilesOpenedWithWrongFlags => "Bad file descriptor",
        error.Unseekable => "Cannot seek",
        error.MessageTooBig => "Message too long",
        error.NetworkUnreachable => "No route to host",
        error.NetworkSubsystemFailed => "Network is down",
        error.FileDescriptorNotASocket => "Socket operation on non-socket",
        error.FastOpenAlreadyInProgress => "Operation already in progress",
        error.RenameAcrossMountPoints => "Invalid cross-device link",
        error.CorruptedData => "Integrity check failed",
        error.LockViolation, error.InvalidArgument => unreachable,
        error.Unexpected => "Unknown error",
    };
}
